// Firebase版本的文章服务
import { db } from '../firebase';
import { 
  collection, 
  getDocs, 
  getDoc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc, 
  query, 
  where, 
  serverTimestamp, 
  orderBy 
} from 'firebase/firestore';

// 初始化示例数据的函数
export const initializeFirebaseData = async () => {
  try {
    // 检查是否已有数据
    const postsSnapshot = await getDocs(collection(db, 'posts'));
    
    if (postsSnapshot.empty) {
      console.log('数据库为空，初始化示例数据');
      
      // 示例数据
      const initialPosts = [
        { 
          title: 'Getting Started with Markdown', 
          content: `# Getting Started with Markdown...`, 
          status: 'published',
          date: new Date('2025-04-17').toISOString(),
          createdAt: serverTimestamp()
        },
        { 
          title: 'Advanced Markdown Techniques', 
          content: `# Advanced Markdown Techniques...`, 
          status: 'draft',
          date: new Date('2025-04-18').toISOString(),
          createdAt: serverTimestamp()
        },
        { 
          title: 'Building a Responsive Blog with React', 
          content: `# Building a Responsive Blog with React...`, 
          status: 'published',
          date: new Date('2025-04-19').toISOString(),
          createdAt: serverTimestamp()
        }
      ];
      
      // 添加示例数据到Firestore
      const batch = db.batch();
      
      initialPosts.forEach(post => {
        const docRef = doc(collection(db, 'posts'));
        batch.set(docRef, post);
      });
      
      await batch.commit();
      console.log('示例数据已初始化');
    }
  } catch (error) {
    console.error('初始化数据时出错:', error);
  }
};

// 获取所有文章
export const getAllPosts = async () => {
  try {
    const postsQuery = query(
      collection(db, 'posts'),
      orderBy('createdAt', 'desc')
    );
    
    const querySnapshot = await getDocs(postsQuery);
    
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      // 处理Firestore的Timestamp
      date: doc.data().date?.split('T')[0] || new Date().toISOString().split('T')[0]
    }));
  } catch (error) {
    console.error('获取所有文章时出错:', error);
    return [];
  }
};

// 获取已发布的文章
export const getPublishedPosts = async () => {
  try {
    const postsQuery = query(
      collection(db, 'posts'),
      where('status', '==', 'published'),
      orderBy('createdAt', 'desc')
    );
    
    const querySnapshot = await getDocs(postsQuery);
    
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      date: doc.data().date?.split('T')[0] || new Date().toISOString().split('T')[0]
    }));
  } catch (error) {
    console.error('获取已发布文章时出错:', error);
    return [];
  }
};

// 通过ID获取单个文章
export const getPostById = async (id) => {
  try {
    const docRef = doc(db, 'posts', id);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      return {
        id: docSnap.id,
        ...docSnap.data(),
        date: docSnap.data().date?.split('T')[0] || new Date().toISOString().split('T')[0]
      };
    } else {
      console.log('没有找到指定ID的文章');
      return null;
    }
  } catch (error) {
    console.error('获取文章时出错:', error);
    return null;
  }
};

// 创建新文章
export const createPost = async (post) => {
  try {
    const newPost = {
      ...post,
      date: new Date().toISOString(),
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    };
    
    const docRef = await addDoc(collection(db, 'posts'), newPost);
    
    return {
      id: docRef.id,
      ...newPost,
      date: newPost.date.split('T')[0]
    };
  } catch (error) {
    console.error('创建文章时出错:', error);
    throw error;
  }
};

// 更新文章
export const updatePost = async (id, updatedPost) => {
  try {
    const docRef = doc(db, 'posts', id);
    
    // 添加更新时间戳
    const postToUpdate = {
      ...updatedPost,
      updatedAt: serverTimestamp()
    };
    
    await updateDoc(docRef, postToUpdate);
    
    return {
      id,
      ...postToUpdate,
      date: postToUpdate.date?.split('T')[0] || new Date().toISOString().split('T')[0]
    };
  } catch (error) {
    console.error('更新文章时出错:', error);
    throw error;
  }
};

// 删除文章
export const deletePost = async (id) => {
  try {
    const docRef = doc(db, 'posts', id);
    await deleteDoc(docRef);
    return true;
  } catch (error) {
    console.error('删除文章时出错:', error);
    return false;
  }
};

// 判断当前环境是否支持Firestore
export const isFirebaseAvailable = () => {
  try {
    return !!db;
  } catch (error) {
    console.error('检查Firebase可用性时出错:', error);
    return false;
  }
}; 